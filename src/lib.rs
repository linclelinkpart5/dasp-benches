#![feature(test)]

extern crate test;
use test::Bencher;

use dasp::Frame;

const FRAME_A: [f64; 32] = [
    -1.00000000, -0.95161290, -0.90322581, -0.85483871,
    -0.80645161, -0.75806452, -0.70967742, -0.66129032,
    -0.61290323, -0.56451613, -0.51612903, -0.46774194,
    -0.41935484, -0.37096774, -0.32258065, -0.27419355,
    -0.22580645, -0.17741935, -0.12903226, -0.08064516,
    -0.03225806,  0.01612903,  0.06451613,  0.11290323,
     0.16129032,  0.20967742,  0.25806452,  0.30645161,
     0.35483871,  0.40322581,  0.45161290,  0.50000000,
];

const FRAME_B: [f64; 32] = [
    -0.25000000, -0.23387097, -0.21774194, -0.20161290,
    -0.18548387, -0.16935484, -0.15322581, -0.13709677,
    -0.12096774, -0.10483871, -0.08870968, -0.07258065,
    -0.05645161, -0.04032258, -0.02419355, -0.00806452,
     0.00806452,  0.02419355,  0.04032258,  0.05645161,
     0.07258065,  0.08870968,  0.10483871,  0.12096774,
     0.13709677,  0.15322581,  0.16935484,  0.18548387,
     0.20161290,  0.21774194,  0.23387097,  0.25000000,
];

#[bench]
fn bench_frame_offset_amp(b: &mut Bencher) {
    b.iter(|| {
        FRAME_A.offset_amp(0.5)
    });
}

#[bench]
fn bench_frame_scale_amp(b: &mut Bencher) {
    b.iter(|| {
        FRAME_A.scale_amp(0.5)
    });
}

#[bench]
fn bench_frame_add_amp(b: &mut Bencher) {
    b.iter(|| {
        FRAME_A.add_amp(FRAME_B)
    });
}

#[bench]
fn bench_frame_mul_amp(b: &mut Bencher) {
    b.iter(|| {
        FRAME_A.mul_amp(FRAME_B)
    });
}

#[bench]
fn bench_frame_map(b: &mut Bencher) {
    b.iter(|| {
        FRAME_A.map::<[f64; 32], _>(|x| x * x + 0.5)
    });
}

#[bench]
fn bench_frame_zip_map(b: &mut Bencher) {
    b.iter(|| {
        FRAME_A.zip_map::<[f64; 32], [f64; 32], _>(FRAME_B, |x, y| x * y + 0.1)
    });
}
